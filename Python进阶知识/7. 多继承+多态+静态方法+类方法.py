"""
一、多继承
    1. 类可以有多个父类并具有其属性和方法
    2. class 子类(父类1, 父类2): pass
    3. 不同父类存在同名方法, 调用顺序
        - 就近原则, 也就是先调用 父类1
        - 属性 __mro__ 可以查看方法搜索顺序
    4. 弊端
        - 父类同名方法, 容易引发冲突
        - 代码负责度增加

二、多态
    1. 同一种行为不同的表现形式
    2. 前提: 继承+重写
    3. 多态性: 一种调用方式, 不同的执行结果
        class A(object):
            def eat(self): print("我会干饭")
        class B(A):
            def eat(self): print("我会干饭1")
        class C(A):
            def eat(self): print("我会干饭2")
        # 多态性: 定义一个统一的接口, 多种实现
        def test(obj):
            obj().eat()
        test(A)  # 我会干饭
        test(B)  # 我会干饭1
        test(C)  # 我会干饭2

三、静态方法
    1. 由 @staticmethod 装饰, 静态方法没有 self, cls 参数限制
    2. 与类无关, 可以转化成函数使用
    3. [访问] 类、对象
    4. [作用] 避免多余参数传递, 降低内存占用性能消耗

四、类方法
    1. 由 @classmethod 装饰, 第一个参数必须是 cls (类对象)
    2. 方法内部可以访问类属性, 或者调用其他类方法
    3. [访问] 类
    4. [场景] 当方法中需要使用到类对象(如访问私有类属性等), 类方法一般配合类属性使用
    
五、三大方法总结
    1. 实例方法
        - 能访问实例属性; 类.属性名 访问类属性, 不建议用 self.类属性名
    2. 静态方法
        - 不能访问实例属性; 类.属性名 访问类属性, 但无意义
    3. 类方法
        - 不能访问实例属性; cls.属性名 访问类属性
        
    4. 类属性
        - 公共的, 所有方法内部都可访问
        - 静态方法不需要访问类属性
    5. 实例属性
        - 私有的, 只有实例方法能访问
"""