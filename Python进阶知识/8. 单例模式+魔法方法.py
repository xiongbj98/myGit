"""
__new__() VS __init__()
1. [作用] new 创建对象并返回对象引用（内存地址）; init 初始化对象, 定义实例属性
2. [类型] new 是类级别的方法, init 是实例级别的方法

一、单例模式
    1. 常用的软件设计模式, 确保某一个类只有一个实例存在（多个对象 内存地址不变）
    2. [优点] 节省内存空间 [缺点] 多线程访问的时候, 容易引发线程安全问题
    3. 实现方式
        - 由 @classmethod 实现
        - 通过装饰器实现
        - [重点] 通过 __new__() 实现
        - 通过导入模式实现
    4. 重写 __new__ 方法, 设计流程
        1. 定义一个类属性, 初始值None, 用来记录单例对象的引用
        2. 重写__new__()方法
        3. 判断类属性==None, 把__new__()返回保存进去
        4. 返回类属性中记录的对象引用
    5. 通过导入模块实现
        - 模块就是天然的单例模式
        from pkg import cls as c1
        from pkg import cls as c2
        此时 c1 和 c2 内存地址一致
    6. 应用场景
        1. 回收站
        2. 音乐播放器
        3. 开发游戏软件 - 场景管理
        4. 数据库配置、数据库连接池

二、魔法方法
    1. [属性] __doc__ : 类、函数的描述信息（只能使用多行注释）
    2. [属性] __module__ / __class__ : 当前操作对象所在的模块 / 类
    3. [方法] __str__() : 对象的描述信息（类中定义后, 默认输出该方法的返回值且必须是字符串）
    4. [方法] __del__() : 析构函数, 程序结束时调用或对象被删除时调用
    5. [方法] __call__() : 使实例对象称为一个可调用对象, 像函数一样调用
        - callable(): 判断对象是否可调用
        - 调用一个可调用对象, 实际就是调用它的__call__()方法
"""